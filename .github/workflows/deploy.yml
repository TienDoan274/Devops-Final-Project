name: Deploy to AWS EKS with SonarQube and Trivy Scanning

on:
  push:
    branches:
      - main  # Trigger when there is a commit to the main branch

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  
      - name: SonarQubeScan
        uses: SonarSource/sonarqube-scan-action@v4
        env: 
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

  trivyScan:
    name: Trivy Security Scanning
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Trivy
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy filesystem scan
          run: |
            trivy fs --exit-code 1 --severity CRITICAL --security-checks vuln ./frontend
            trivy fs --exit-code 1 --severity CRITICAL --security-checks vuln ./order-service
            trivy fs --exit-code 1 --severity CRITICAL --security-checks vuln ./user-service
            trivy fs --exit-code 1 --severity CRITICAL --security-checks vuln ./product-service

      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/order:latest ./order-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user:latest ./user-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/product:latest ./product-service

      - name: Run Trivy vulnerability scan on images
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL --no-progress ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          trivy image --exit-code 1 --severity HIGH,CRITICAL --no-progress ${{ secrets.DOCKER_USERNAME }}/order:latest
          trivy image --exit-code 1 --severity HIGH,CRITICAL --no-progress ${{ secrets.DOCKER_USERNAME }}/user:latest
          trivy image --exit-code 1 --severity HIGH,CRITICAL --no-progress ${{ secrets.DOCKER_USERNAME }}/product:latest

      - name: Login to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push Docker images to Docker Hub
        if: success()
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest 
          docker push ${{ secrets.DOCKER_USERNAME }}/order:latest 
          docker push ${{ secrets.DOCKER_USERNAME }}/user:latest 
          docker push ${{ secrets.DOCKER_USERNAME }}/product:latest 

  deployToEKS:
    name: Deploy to AWS EKS
    runs-on: ubuntu-latest
    needs: trivyScan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name my-cluster-name  # Replace with your actual cluster name

      - name: Deploy to EKS using kubectl
        run: |
          kubectl apply -f ./kubernetes
          
          kubectl set image deployment/frontend-deployment frontend=${{ secrets.DOCKER_USERNAME }}/frontend:latest
          kubectl set image deployment/order-api-deployment order-api=${{ secrets.DOCKER_USERNAME }}/order:latest
          kubectl set image deployment/product-api-deployment product-api=${{ secrets.DOCKER_USERNAME }}/product:latest
          kubectl set image deployment/user-api-deployment user-api=${{ secrets.DOCKER_USERNAME }}/user:latest  