name: Deploy to AWS EKS with SonarQube and Trivy Scanning

on:
  push:
    branches:
      - main

jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  
      - name: SonarQubeScan
        uses: SonarSource/sonarqube-scan-action@v4
        env: 
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

  trivyFileScan:
    name: Trivy Scan Files
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - name: Install Trivy
        run: |
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.22.0_Linux-64bit.deb
      - name: Run Trivy scan
        run: trivy fs --severity CRITICAL .

  dockerBuildPush:
    name: Build and Push Docker Images
    needs: trivyFileScan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changes
        run: |
          echo "FRONTEND=$(git diff --name-only HEAD^ HEAD | grep ^frontend/ || true)" >> $GITHUB_ENV
          echo "ORDER=$(git diff --name-only HEAD^ HEAD | grep ^order-service/ || true)" >> $GITHUB_ENV 
          echo "USER=$(git diff --name-only HEAD^ HEAD | grep ^user-service/ || true)" >> $GITHUB_ENV
          echo "PRODUCT=$(git diff --name-only HEAD^ HEAD | grep ^product-service/ || true)" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push changed images 
        run: |
          if [ ! -z "${{ env.FRONTEND }}" ]; then
            docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest ./frontend
            docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          fi
          if [ ! -z "${{ env.ORDER }}" ]; then
            docker build -t ${{ secrets.DOCKER_USERNAME }}/order:latest ./order-service 
            docker push ${{ secrets.DOCKER_USERNAME }}/order:latest
          fi
          if [ ! -z "${{ env.USER }}" ]; then
            docker build -t ${{ secrets.DOCKER_USERNAME }}/user:latest ./user-service
            docker push ${{ secrets.DOCKER_USERNAME }}/user:latest
          fi
          if [ ! -z "${{ env.PRODUCT }}" ]; then
            docker build -t ${{ secrets.DOCKER_USERNAME }}/product:latest ./product-service
            docker push ${{ secrets.DOCKER_USERNAME }}/product:latest
          fi

  trivyImageScan:
    name: Trivy Scan Docker Images
    needs: dockerBuildPush
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Trivy
        run: |
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.22.0_Linux-64bit.deb
      - name: Scan Docker images
        run: |
          trivy image --severity CRITICAL ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          trivy image --severity CRITICAL ${{ secrets.DOCKER_USERNAME }}/order:latest
          trivy image --severity CRITICAL ${{ secrets.DOCKER_USERNAME }}/user:latest
          trivy image --severity CRITICAL ${{ secrets.DOCKER_USERNAME }}/product:latest

  deployToEKS:
    name: Deploy to AWS EKS
    needs: trivyImageScan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.0'
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name my-cluster-name
      - name: Deploy to EKS
        run: |
          kubectl apply -f ./kubernetes
          kubectl set image deployment/frontend-deployment frontend=${{ secrets.DOCKER_USERNAME }}/frontend:latest
          kubectl set image deployment/order-api-deployment order-api=${{ secrets.DOCKER_USERNAME }}/order:latest
          kubectl set image deployment/product-api-deployment product-api=${{ secrets.DOCKER_USERNAME }}/product:latest
          kubectl set image deployment/user-api-deployment user-api=${{ secrets.DOCKER_USERNAME }}/user:latest